# -*- coding: utf-8 -*-
"""PSET-5-Problem-5-Simulation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KBwybsaSMXzzx2rvizCMpQFN3rVHo7u7
"""

# I am curious to see if the inequality they found is actually true, or if my inequality is more true

import numpy as np
import matplotlib.pyplot as plt

N = 10000 # number of times to perform experiment
n_i = 5 # number of pieces to split up interval into (make this a variable)
c = 5
values = np.arange(0,n_i+1) # possible values to sample from

upper_bound = 1/12*c**2
slice_i = 1
dx = c/n_i
distributions = []
vars = []
EX = []
for n in range(N):
  prob = 0
  values = np.arange(0,n_i+1) # possible values to sample from
  distribution = []
  temp = n_i
  ex = 0
  ex2 = 0
  for i in range(n_i):
    if i == n_i - 1:
      slice_i = temp
      prob += slice_i * dx /c
      assert np.allclose(1,prob), 'Total probability of PDF must be = 1'
    else:
      if len(values != 0):
        slice_i = np.random.choice(values)
      else:
        slice_i = 0
      temp = temp - slice_i
      values = np.arange(0,temp+1) # possible values to sample from
      x = i/n_i*c + dx/2
      # print(x)
    prob += slice_i * dx / c
    distribution.append(slice_i)
    px = slice_i/c 
    ex += slice_i * x / c # divide by c to obtain probability of slice_i
    # print(f'ex:{ex}')
    ex2 += slice_i * x**2 / c
  # print(f'x,px,ex: {x},{px},{ex}')
  # print(distribution)
  pdf = np.array(distribution)/c
  # print(distribution)
  # print(pdf)
  assert np.sum(pdf)==1, 'PDF must sum to 1'
  distributions.append(pdf)
  vars.append(ex2 - (ex)**2)
  EX.append(ex)

distributions

np.std

np.max(EX)

np.max(vars), np.argmax(vars)

distributions[917]

distributions[0]

vars[96]

distributions[3]

plt.step(list(range(len(distribution))),distributions[946],where='post')

plt.plot(sorted)
upper_bound

c**2/4

test = [1/10 for i in range(0,10)]
test

np.std([1/10 for i in range(0,10)])**2